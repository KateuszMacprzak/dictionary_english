1.Wszystkie słowa mamy w pliku json                         +
2.Ponieważ słowa mamy w pliku json musimy zaimportowac json +
3.Import danych do programu                                 +
4.Stworzenie funkcji sprawdzającej działanie po zaimportwaniu danych do programu +
5.Stworzenie output, który będzie wyświetlał znaczenie słowa, które wprowadził użytkownik+
6.Punkt 5- usunięcie, stworzenie całej funkcji, która będzie zajmowała się outputem. W naszym przypadku będzie miała nazwę translate.+
7.Dodanie opcji print, która będzie zajmowała się wyświetleniem napisu+
CD6
Najpierw musimy stworzyć warunek do wyświetlania znaczenie słowa, jeżeli jest ono w bazie+
Musimy stworzyć warunek, jeśli takiego słowa nie ma w bazie +
Stworzenie kolejnych warunków, dzięki którym program będzie wyświetlał wszystkie rodzaje słów, tzn. USA, usa, Usa+
8.Stworzenie bardziej przyjaznego interfejsu, który będzie wyświetlał elementy pod sobą, a nie jeden obok drugiego+


|||||||||||||||||||||||||||||||||______CLOSE MATCHES________||||||||||||||||||||||||||||||
1.Z biblioteki difflib improtujemy opcje: get_close_matches
w terminalu zapis tego wygląda w następujacy sposób:
>>>from difflib import get_close_matches
>>>get_close_matches('abc',['abcd','bcde','typo'])
['abcd']        This is the result, which you get
możemy to również wykonać z przybliżeniem:
>>>get_close_matches('abc',['abcd','bcde','typo'],cutoff=0.7)
['abcd']         This is the result, which you get
2.Dodanie nowego warunku:
2.1. Jeśli długość(funkcja(co,z czego.keys()))>0:
2.2 Opis funkcji 
2.2.1. Dzieki wykorzystaniu %s możemy dodać str w innym str, musimy pamiętać, żeby po nawiasie dodać %, a następnie funkcje skąd ma pozyskać str inny str
Zamiast data wprowadzamy data.keys- są to rozwiązanie w systemie
Chcemy podać tylko jedno słowo, więc musimy pamiętać, aby napisać tylko to jedno, a nie wymieniać wszystkie
2.3 Wprowadzenie funkcji decide dla użytkownika
2.3.1 data[get_close_matches(word, data.keys())[0]]




import json
data=json.load(open("data.json"))
from difflib import get_close_matches
#print(data['love']) funkcja sprawdzająca działanie po imporcie danych z data
def translate(word):
    word=word.lower()
    if word in data:
        return data[word]
    elif word.title() in data:
        return data[word.title()]
    elif word.upper() in data:
        return data[word.upper()]
    elif word.lower() in data:
        return data[word.upper()] #wcześniej było return prin(data[word.upper()]) i dlatego system pokazywał treść zwrotną w nawiasach
    elif len(get_close_matches(word,data.keys()))>0:
        print("Did you mean %s instead ?"%get_close_matches(word,data.keys())[0])
        decide=input("Click y for yes or n for no: ")
        if decide=='y':
            return data [get_close_matches(word, data.keys())[0]]   
        elif decide=='n':
            return("So you click on wrong buttom or this word does not exist")
    else:
        print("This world does not exist")
word=input("Enter the word: ")
output=translate(word)
if type(output)==list:
    for item in output:
        print (item)
else:
    print (output)




